// This file has been autogenerated from a class added in the UI designer.

using System;
using Core;
using Google.Maps;
using CoreLocation;
using Core.ViewModels;
using Foundation;
using ListMvvmIOS.Util;
using UIKit;
using CoreGraphics;

namespace ListMvvmIOS
{
	public partial class TaskDetailViewController : UIViewController
	{
		public TaskItem Task;
        public DetailViewModel viewModel;
        public MainViewModel mainViewModel;
        private MapView mapView;

        public TaskDetailViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            SetupGoogleMap();
            UpdateDoneButton();
            titleLabel.Text = Task.Title;
			descriptionLabel.Text = Task.Description;
			categoryLabel.Text = Task.Category;
            deleteButton.SetTitle(ConstantVariables.GetLocalizable(ConstantVariables.DeleteTaskLocalizable), UIControlState.Normal);
            UpdateDoneButton();
			doneButton.TouchUpInside += (s, e) =>
			{
                viewModel.ToggleCompleteCommand.Execute(null);
				NavigationController.PopViewController(true);
            };
            deleteButton.TouchUpInside += ConfirmDelete;
        }

        private void ConfirmDelete(object sender, EventArgs e)
        {
            var alert = UIAlertController.Create(ConstantVariables.GetLocalizable(ConstantVariables.DeleteTaskLocalizable), ConstantVariables.GetLocalizable(ConstantVariables.DeleteTaskMsgLocalizable), UIAlertControllerStyle.Alert);
            alert.AddAction(
                UIAlertAction.Create(ConstantVariables.GetLocalizable(ConstantVariables.NoLocalizable), UIAlertActionStyle.Cancel, null)
            );
            alert.AddAction(
                UIAlertAction.Create(ConstantVariables.GetLocalizable(ConstantVariables.YesLocalizable), UIAlertActionStyle.Destructive, (action) =>
                {
                    mainViewModel.Items.Remove(Task);
                    NavigationController.PopViewController(true);
                })
            );
            this.PresentViewController(alert, true, null);
        }

        private void UpdateDoneButton()
        {
            if (viewModel.IsComplete)
            {
                doneButton.SetTitle(ConstantVariables.GetLocalizable(ConstantVariables.PendingLocalizable), UIControlState.Normal);
            }
            else
            {
                doneButton.SetTitle(ConstantVariables.GetLocalizable(ConstantVariables.DoneLocalizable), UIControlState.Normal);
            }
        }

        private void SetupGoogleMap()
        {
            // Establecer las coordenadas y el nivel de zoom
            var camera = CameraPosition.FromCamera(latitude: Task.Latitude, longitude: Task.Longitude, zoom: 15);
            mapView = MapView.FromCamera(CGRect.Empty, camera);

            // Añadir un marcador en la posición deseada
            var marker = new Marker()
            {
                Position = new CLLocationCoordinate2D(Task.Latitude, Task.Longitude),
                Title = Task.Title,
                Map = mapView
            };

            // Añadir el mapa como subvista
            View.AddSubview(mapView);

            // Establecer restricciones para el mapa
            mapView.TranslatesAutoresizingMaskIntoConstraints = false;
            mapView.TopAnchor.ConstraintEqualTo(View.SafeAreaLayoutGuide.TopAnchor).Active = true;
            mapView.BottomAnchor.ConstraintEqualTo(View.SafeAreaLayoutGuide.BottomAnchor).Active = true;
            mapView.LeadingAnchor.ConstraintEqualTo(View.LeadingAnchor).Active = true;
            mapView.TrailingAnchor.ConstraintEqualTo(View.TrailingAnchor).Active = true;
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            mapView?.StartRendering();
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            mapView?.StopRendering();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                mapView?.Dispose();
                mapView = null;
            }
            base.Dispose(disposing);
        }

    }
}
